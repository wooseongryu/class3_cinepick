<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--
마이바티스에서 실행할 SQL 구문을 갖는 xxxMapper.xml 파일 정의
=> 실행할 각 구문의 이름을 태그로 제공함(insert, update, delete, select 등)
   (내부적으로 PreparedStatement 객체를 통해 SQL 구문을 실행함)
=> 주의! mapper 태그 내의 namespace 속성에 현재 XML 파일과 연결될 자바 인터페이스를 명시해야한다!
   ex) <mapper namespace="패키지명.인터페이스명">
   (존재하지 않는 인터페이스(오타 등)라도 오류가 표시되지 않음)
=> 주의! 각 태그 내의 id 속성에 지정될 이름은 Mapper 인터페이스 내의 메서드명과 일치해야한다!
-->
<mapper namespace="com.itwillbs.cinepick.mapper.UserMapper">
	<!-- insert  -->
	<insert id="insertUser">
		INSERT INTO user
		VALUES (
			null  
			, #{user_name}
			, #{user_id}
			, #{user_passwd}
			, #{user_email} 
			, #{user_phone} 
			, now()
			, 'N'
			, 'N'
			, null
		)
	</insert>
	
	<!-- 인증정보 등록 - INSERT -->
	<insert id="insertAuthInfo">
		INSERT
		INTO auth_info
		VALUES (
			#{id}
			, #{authCode}
		)
	</insert>
	
	<insert id="insertMyQuestion">
		<selectKey keyProperty="myQuestion_num" resultType="int" order="BEFORE">
			SELECT IFNULL(MAX(myQuestion_num), 0) 
			FROM myQuestion
		</selectKey>
		INSERT
		INTO myQuestion
		VALUES (
			null
			, #{myQuestion_id}
			, #{myQuestion_subject}
			, #{myQuestion_content}
			, #{myQuestion_answer}
			, 'N'
			, now()
		)
	</insert>
	
	<!-- select -->
	<select id="selectUser" resultType="User">
		SELECT
			user_idx
			, user_name
			, user_id
			, user_passwd
			, user_email
			, user_phone
			, hire_date
			, user_is_admin
			, mail_auth_status
			, CASE
				WHEN kakao_id IS NULL THEN '미연동'
				ELSE '연동됨'
			  END AS kakao_id
		FROM user 
		WHERE user_id = #{user_id}
	</select>

	<select id="selectUserList" resultType="User">
		SELECT * FROM user
	</select>

	<!-- 전달받은 아이디(id)에 해당하는 auth_info 테이블의 레코드 조회 -->
	<select id="selectAuthInfo" resultType="AuthInfo">
		SELECT *
		FROM auth_info
		WHERE auth_id = #{id}
	</select>


	<select id="checkUser" resultType="User">
		SELECT * 
		  FROM user 
		 WHERE user_email = #{user_email} 
		   AND user_passwd = #{user_passwd}
	</select>
	
	<!-- 암호화 된 패스워드 조회 -->
	<!-- member 테이블의 아이디에 해당하는 패스워드 조회 -->
	<!-- resultType 은 MemberVO 타입 또는 string(String) 타입 활용 -->
	<select id="selectPasswd" resultType="string">
		SELECT passwd
		FROM user
		WHERE user_id = #{user_id}
	</select>

	<!-- 아이디 찾기 -->
	<select id="selectIdSearch" resultType="User">
		SELECT user_id
		FROM user
		WHERE user_name = #{user_name} 
		AND user_email = #{user_email}
	</select>

	<!-- 비밀번호 찾기 -->
	<select id="selectPasswdSearch" resultType="int">
		SELECT COUNT(user_id)
		FROM user
		WHERE user_id = #{user_id}
			AND user_email = #{user_email}
	</select>
	
	<!-- 임시 비밀번호 변경 -->
	<update id="updatePasswdChange">
		UPDATE user
		SET user_passwd = #{user_passwd}
		WHERE user_id = #{user_id}
			AND user_email = #{user_email}
	</update>
	
	<!-- 1:1 문의 목록 조회 -->
	<select id="selectMyQuestion" resultType="MyQuestion">
        SELECT
			myQuestion_num
			, myQuestion_id
			, myQuestion_subject
			, myQuestion_content
			, myQuestion_answer
			, CASE WHEN myQuestion_answer IS NULL THEN '답변대기중'
				   								  ELSE '답변완료' END AS myQuestion_status 
			, myQuestion_date
		FROM myQuestion
		WHERE 1=1
		<if test="myQuestion_num != null and !myQuestion_num.equals('')">
		AND myQuestion_num = #{myQuestion_num }
		</if>
		<if test="myQuestion_id != null and !myQuestion_id.equals('')">
		AND myQuestion_id = #{myQuestion_id }
		</if>
    </select>
    
	<!-- 내가 쓴 리뷰 조회 -->
	<select id="selectReviewList" resultType="Review">
       SELECT
		review_num
		, review_rating
		, review_content
		, review_date
		, movie_code
		, user_id
	FROM review
	<if test="review_num != null and !review_num.equals('')">
	WHERE review_num = #{review_num }
	</if>
	<if test="user_id != null and !user_id.equals('')">
	WHERE user_id = #{user_id }
	</if>
	ORDER BY review_date DESC
    </select>

	
	<!-- 유저 예매내역 조회 -->
	<select id="selectBookList" resultType="Book">
		SELECT 
			b.book_id
			, m.movie_nameK
			, t.theater_name
			, sc.screen_name 
			, b.seat_list
			, b.ticket_type
			, s.sche_start_time 
			, s.sche_end_time 
			, m.movie_runtime
			, b.book_date
			, b.total_cost
		FROM book b 
			JOIN schedule s 
			  ON b.sche_idx = s.sche_idx
			JOIN movie m  
			  ON s.sche_movie_code = m.movie_code
			JOIN theater t 
			  ON s.sche_theater_idx = t.theater_idx
			JOIN screen sc 
 			  ON s.sche_screen_idx = sc.screen_idx
	<if test="book_id != null and !book_id.equals('')">
		WHERE book_id = #{book_id }
	</if>
	<if test="user_id != null and !user_id.equals('')">
		WHERE user_id = #{user_id }
	</if>
	ORDER BY book_id;
	</select>
	
	<!-- 유저마이페이지 예매내역 조회 -->
	<select id="selectUserBookList" resultType="Book">
		SELECT 
			b.book_date, 
			m.movie_nameK, 
			m.movie_poster
		FROM book b 
			JOIN schedule s 
			ON b.sche_idx = s.sche_idx
			JOIN movie m 
			ON s.sche_movie_code = m.movie_code
	<if test="book_id != null and !book_id.equals('')">
		WHERE book_id = #{book_id }
	</if>
	<if test="user_id != null and !user_id.equals('')">
		WHERE user_id = #{user_id }
	</if>
		ORDER BY book_date DESC
		LIMIT 4
	</select>
	
	
	<!-- update -->
	<!-- 기존 인증정보 갱신 - UPDATE -->
	<!-- 아이디에 해당하는 레코드의 인증코드를 수정 -->
	<update id="updateAuthInfo">
		UPDATE auth_info
		SET auth_code = #{authCode}
		WHERE auth_id = #{id}
	</update>
	
	<!-- 회원 인증상태 변경 - UPDATE -->
	<!-- user 테이블의 아이디에 해당하는 레코드의 인증상태(member_auth_status) 컬럼값 "Y" 로 변경 -->
	<update id="updateMailAuthStatus">
		UPDATE user
		SET mail_auth_status = 'Y'
		WHERE user_id = #{id}
	</update>
	
	
	<!-- 회원 정보 변경 -->
	<update id="updateUser">
		UPDATE user
		SET user_passwd = #{user_passwd}
		WHERE user_id = #{user_id}
	</update>
	
	
	
	<!-- delete -->
	<!-- 인증정보 삭제 - DELETE -->
	<!-- auth_info 테이블의 아이디에 해당하는 레코드의 인증정보 삭제 -->
	<delete id="deleteAuthInfo">
		DELETE FROM auth_info
		WHERE auth_id = #{id}
	</delete>


	<!-- 회원 탈퇴-->
	<delete id="deleteUser">
		DELETE FROM user
		WHERE user_id = #{user_id}
	</delete>
	
	<!-- 내가 쓴 리뷰 삭제 -->
	<delete id="deleteMyReview">
		DELETE FROM review
		WHERE review_num = #{review_num}
	</delete>
	
	<!-- 찜목록 불러오기-->
<!-- 	<select id="selectLikeMovieList" resultType="Like"> -->
<!-- 		SELECT lm.movie_code, movie_poster, movie_nameK, movie_status  -->
<!--   		FROM like_movie lm -->
<!--   		INNER JOIN movie m  -->
<!--      	ON lm.movie_code = m.movie_code  -->
<!--  		WHERE user_id = #{sId} -->
<!-- 	</select> -->
	
	<select id="selectLikeMovieList" resultType="Like">
		SELECT lm.movie_code
				, movie_poster
				, movie_nameK
				, movie_status
				, COUNT(bs.book_id) AS book_id
				,lm.user_id 
  		FROM like_movie lm
  		INNER JOIN movie m 
     	ON lm.movie_code = m.movie_code
     	LEFT JOIN (SELECT sche_movie_code , b.book_id, b.user_id
					FROM book b JOIN schedule s 
					ON b.sche_idx = s.sche_idx
					WHERE user_id = #{sId}) bs
		ON lm.movie_code = bs.sche_movie_code
		WHERE lm.user_id = #{sId}
		GROUP BY lm.movie_code
	</select>
	
	
	
	
	
	<select id="getMemberKakaoLogin" resultType="User">	
		SELECT
			user_id
			, user_is_admin
			, kakao_id
		FROM user
		WHERE kakao_id = #{kakao_id}
	</select>
	
	<update id="updateKakaoId">
		UPDATE user
		SET kakao_id = #{kakao_id}
		WHERE user_id = #{user_id}
	</update>
</mapper>






























