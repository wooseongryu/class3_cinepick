<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
    
<mapper namespace="com.itwillbs.cinepick.mapper.TicketMapper">

	<insert id="insertTicket" parameterType="map">
		INSERT
			INTO ticket
			VALUES (
				null
				, #{allTickets}
				, #{seats}
			)
	</insert>
	
	<insert id="insertTickets" parameterType="map">
<!-- 		INSERT -->
<!-- 			INTO book_temp -->
<!-- 			VALUES ( -->
<!-- 				null -->
<!-- 				, #{allTickets} -->
<!-- 				, #{seats} -->
<!-- 				, #{total} -->
<!-- 			) -->
			
		INSERT 
			INTO book_temp
			VALUES (
			    (SELECT CONCAT('R', LPAD(COALESCE(MAX(SUBSTRING(book_code, 2) + 1), 1), 5, '0')) FROM book_temp b)
			    , #{allTickets}
				, #{seats}
				, #{total}
				, #{sche_idx}
			);	
			
	</insert>
	
	<insert id="insertPay" parameterType="map">
		INSERT
			INTO pay
			VALUES (
				#{merchant_uid}
				, #{moneySum}
				, #{pay_date}
			)
	</insert>
	
	<insert id="insertBook" parameterType="map">
		<selectKey keyProperty="book_id" resultType="String" order="AFTER">
			SELECT book_id
			FROM book
			WHERE user_id = #{user_id}
			ORDER BY book_id DESC
			LIMIT 1
		</selectKey>
		INSERT
			INTO book
			VALUES (
				CASE WHEN (SELECT MAX(idx) FROM book b) IS NULL THEN 1
			    ELSE ((SELECT MAX(idx) FROM book b) + 1) END
				, (SELECT CONCAT('R', LPAD(COALESCE(MAX(SUBSTRING(book_id, 2) + 1), 1), 5, '0')) FROM book b)
				, #{sche_idx}
				, #{seats}
				, #{allTickets}
				, #{user_id}
				, #{moneySum}
				, #{merchant_uid}
				, now()
			)
	</insert>
	

	
	
	<select id="selectBook" resultType="Book">
		SELECT
			b.book_id
			, m.movie_nameK
			, t.theater_name
			, s.screen_name
			, sc.sche_date
			, TIME_FORMAT(sc.sche_start_time, '%H:%i') AS sche_start_time
			, b.ticket_type
			, b.seat_list
			, b.total_cost
			, m.movie_poster
		FROM book b
		JOIN schedule sc
		ON b.sche_idx = sc.sche_idx
		JOIN theater t
		ON sc.sche_theater_idx = t.theater_idx
		JOIN screen s
		ON s.screen_idx = sc.sche_screen_idx
		JOIN movie m
		ON sc.sche_movie_code = m.movie_code
		WHERE b.book_id = #{book_id};
	</select>

	<!-- 결제 성공시 TABLE seat에 sche_idx가 있으면 좌석 insert, 없으면 update -->
	<insert id="insertUpdateSeat" parameterType="map">
		INSERT INTO seat
			VALUES (#{sche_idx}, #{seats})
			ON duplicate KEY
		UPDATE seat_list = concat(seat_list, #{seats})
	</insert>
	
	<!-- step2에서 스케줄 번호로 예매완료된 좌석 가져오기 -->
	<select id="selectSeatList" parameterType="int">
		SELECT seat_list
			FROM seat
			WHERE sche_idx = #{sche_idx};
	</select>
	
	
	<!-- 아래 구문들이 필요 없어진 것 같습니다.. -->
	
	<select id="selectBookId" resultType="String">
		SELECT book_id
		FROM book
		WHERE user_id = #{user_id}
		ORDER BY book_id DESC
		LIMIT 1;
	</select>
	
	
	<select id="selectScheIdx" parameterType="map" resultType="int">
		SELECT COUNT(*) FROM seat WHERE sche_idx = #{sche_idx}
	</select>
	
	
	<insert id="insertSeat" parameterType="map">
		INSERT INTO seat
			VALUES (
				#{sche_idx}
				, #{seats}		
			);
	</insert>
	
	<update id="updateSeat" parameterType="map">
		UPDATE seat
			SET seat_list = CONCAT(seat_list, #{seats})
			WHERE sche_idx = #{sche_idx};
	</update>
	
	

</mapper>